Host *
     # Prevent our connections from timing out.
     ServerAliveInterval 30
     # ServerAliveCountMax 120  # up to 1 hr (120 * 30sec)
     
     # Connect to a particular host only once; subsequent communication with the same host
     # will use the same connection (transparently to you!) and thus be much, much faster.
     # This will have trouble if ~/.ssh/auth doesn't exist (so we create it in ~/.bashrc)
     # and you will have to manually kill the "master" connection (TODO: using what magic
     # invocation?) if the connection hangs badly enough.
     ControlMaster   auto
     ControlPath     ~/.ssh/auth/%r@%h:%p
     ControlPersist  yes
     
     # Same as default except that blowfish-cbc is moved to front of line, since it's the fastest (behind arcfour)
     Ciphers blowfish-cbc,aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour
     # instead of the default "2,1" -- no fallback to SSHv1
     Protocol 2

####################3
# Here are some basic options for per-host configuration.
# - Note that you can have multiple "SSH hosts" for one actual host, with different settings ("bob",
#   "bob-with-X", "bob-with-sshagent", etc.), if that's handy.
# - Everything after a host directive until the next "host" directive will apply to that host; the
#   indentation is just to make you feel good.
# - For this first example, you'd issue `ssh name-you-can-remember`, which would be the same as
#   `ssh -p 22000 default-username-to-login-with@who-assigns.these-dns-names.anyway.company.net`
#   (with some other options for the ForwardAgent and PasswordAuthentication stuff).

# Host name-you-can-remember
#       Host              who-assigns.these-dns-names.anyway.company.net
#	User              default-username-to-login-with
#	Port              22000

# If a host needs a different key (say, a higher-security key; or a work vs. a personal key):
# 	IdentityFile      ~/.ssh/some-other-id_rsa

# If you don't want to be bothered for a password, because you are always going to be using a key:
#	PasswordAuthentication   no

# If you want to be able to use the SSH keys on your local workstation while logged in to this host.
# WARNING: Can create security issues.  (TODO: Describe them; I'm lazy.)
#	ForwardAgent      yes
# Be warned: You may be tempted to use a wildcard like Host * to just
# apply this setting to all SSH connections. That's not really a good
# idea, as you'd be sharing access to your local SSH keys with every
# server you SSH to. They won't have direct access to the keys, but
# they will be able to use them while the connection is
# established. You should only add servers you intend to use agent
# forwarding with.
#Host *
#	 ForwardAgent true

# If you would normally ssh into a gateway machine and then ssh into another host, you can do that
# in one shot with a ProxyCommand.
#	ProxyCommand      ssh intermediate-hop.example.com exec nc 10.3.60.1 %p 2> /dev/null

# Host when-using-x11-forwarding
#      # "Will only slow things down on fast connections" (from manpage); equivalent to -C
#      Compression yes
#      # see also "CompressionLevel" (setting numbers mean same things as in gzip)
#      # -X
#      ForwardX11 yes
#      # arcfour arguably less secure; both much faster than defaults
#      # equivalent to "-c arcfour,blowfish-cbc"
#      Ciphers arcfour,blowfish-cbc

# Host tunnel
#      HostName some-hostname
#      LocalForward 9906 127.0.0.1:3306
# then can just use `ssh -f -N tunnel` to auto-tunnel!
#  (-f means 'go to background just before command execution',
#   -N means 'no remote command, just forward ports')

# other neat settings:  http://linux.die.net/man/5/ssh_config
# - GatewayPorts  (lets remote applications connect to forwarded ports)
# - LocalCommand (to run after connecting)
# - LocalForward (take port on local system and bind to port on remote system)
# - SendEnv (specifies what env vars are sent; limited by AcceptEnv in sshd_config)
# - Tunnel, TunnelDevice

